input {
  file {
    path => ["/Users/xbyi/Workarea/src/github/yi_xiaobin@163.com/com.yad.logmach/logs/00.log"]
    sincedb_path => "/dev/null"
    start_position => "beginning"

    codec => multiline {
      pattern => "^\["
      negate => true
      what => "previous"
    }
  }
}

filter {
  grok {
    match => {
      "message" => "\[%{DATA:log_time}\] %{DATA:log_id} %{WORD:log_output}%{SPACE}%{DATA:log_num} %{GREEDYDATA:log_content}"
    }
  }

  ruby {
    code => "
      event['log_name'] = File.basename(event['path'], '.*').split('-')[0]
      if event['log_content'].match('(\d{4})-(\d{2})-(\d{2})\s(0\d{1}|1\d{1}|2[0-3]):[0-5]\d{1}:([0-5]\d{1}).*')
	event['log_message'] = event['log_content']	
	event.remove('log_content')
      end
    "
  }

  if [log_message] {
    grok {
      match => {
	"log_message" => "%{TIMESTAMP_ISO8601:log_runtime} %{WORD:log_level}%{SPACE}%{DATA:log_code}\:%{POSINT:log_code_line} - %{GREEDYDATA:log_content}"
      }

      remove_field => ["log_message"]
    }
  }

  ruby {
    code => "
      event['log_name'] = File.basename(event['path'], '.*').split('-')[0]
      if event['log_content']
	event['log_time'] = event['log_time'].sub(' CST', '') if event['log_time']

	_log_content_tmp = event['log_content']

	if _log_content_tmp.match('{\"requestContext\":.*')
	  event['log_request'] = _log_content_tmp.match('{\"requestContext\":.*')[0]
	  event['log_request'] = event['log_request'][0...-1] if event['log_request'][-1] == ']'
	end

	if _log_content_tmp.match('response:\{.*')
	  event['log_response'] = _log_content_tmp.match('response:\{.*')[0].split('response:')[-1]
	  event['log_response'] = '{' + 34.chr + 'responseContext' + 34.chr + ':' + event['log_response'] + '}'
	end

	if /.*\{\s{0,}\"requestContext\"\s{0,}\:\s{0,}.*/.match(_log_content_tmp)
	  if _log_content_tmp.match('response:')
	    _log_content_tmp = _log_content_tmp.gsub(/\n/,'') 
	    _temp = _log_content_tmp.split('response:')
	    _temp0 = _temp[0]
	    event['log_request'] = _temp0.split('request:')[-1]
	    event['log_response'] = _temp[-1]
	  end
	end
	
	if _log_content_tmp.match('服务耗时')
	  _temp = _log_content_tmp.split('.')
	  for _ts in _temp
	    if /.*\:.*/.match(_ts)
	      _t = _ts.split(':')
	      if /.*服务耗时.*/.match(_ts)
		event['log_service_name'] = _t[0].split('服务耗时')[0]
		event['log_service_duration'] = _t[1].split('毫秒')[0]
	      else
		event['log_service_channelSerialNumber'] = _t[1]
	      end
	    end
	  end
	end

	if _log_content_tmp.match('.*返回明文.*')
	  _temp = _log_content_tmp.split('返回明文：')[-1]
	  event['log_result'] = '{' + 34.chr + 'resultContext' + 34.chr + ':' + _temp + '}'
	end
      end
    "
  }

  json {
    source => "log_request"
  }    

  json {
    source => "log_response"
  }    

  json {
    source => "log_result"
  }    

  date {
    match => ["log_runtime", "yyyy-MM-dd HH:mm:ss.SSS"]
    target => "log_runtime"
  }

  date {
    match => ["log_time", "MM/dd/yy HH:mm:ss:SSS"]
    target => "log_time"
  }

  mutate {
    convert => { "log_service_duration" => "integer" }
  }

}

output {
  stdout {
    codec => rubydebug
  }
  
  file {
    path => ["/Users/xbyi/Workarea/src/github/yi_xiaobin@163.com/com.yad.logmach/logs/00_filter.log"]
  }
}
